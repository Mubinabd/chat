basePath: /
definitions:
  entity.AddFileToGroupReq:
    properties:
      file_id:
        type: string
      group_id:
        type: string
    type: object
  entity.ChangePasswordReqBody:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  entity.CreateGroupReq:
    properties:
      name:
        type: string
      user_id:
        type: string
    required:
    - name
    - user_id
    type: object
  entity.EditProfileReqBody:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      username:
        type: string
    type: object
  entity.FileResponse:
    properties:
      file_path:
        type: string
      message:
        type: string
    type: object
  entity.GetByEmail:
    properties:
      email:
        type: string
    type: object
  entity.Group:
    properties:
      created_at:
        type: string
      id:
        type: string
      messages:
        items:
          $ref: '#/definitions/entity.Message'
        type: array
      name:
        type: string
      users:
        items:
          type: string
        type: array
    type: object
  entity.ListGroupsRes:
    properties:
      count:
        type: integer
      groups:
        items:
          $ref: '#/definitions/entity.Group'
        type: array
    type: object
  entity.ListUserRes:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.UserRes'
        type: array
    type: object
  entity.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  entity.Message:
    properties:
      content:
        type: string
      sender_id:
        type: string
      timestamp:
        type: string
    type: object
  entity.MessageReq:
    properties:
      group_id:
        type: string
      message:
        type: string
    type: object
  entity.RegisterReq:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  entity.ResetPassReqBody:
    properties:
      new_password:
        type: string
      reset_token:
        type: string
    type: object
  entity.Setting:
    properties:
      language:
        type: string
      notification:
        type: string
      privacy_level:
        type: string
      theme:
        type: string
    type: object
  entity.UpdateGroupReq:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  entity.UserRes:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  entity.Void:
    type: object
info:
  contact: {}
  description: API for Instant Delivery resources
  title: Chat API Documentation
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset user's password
      parameters:
      - description: Email Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.GetByEmail'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Forgot password
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Login a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset user's password with a reset code
      parameters:
      - description: Password Reset Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.ResetPassReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Reset password
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: UserName
        in: query
        name: username
        type: string
      - description: Full Name
        in: query
        name: full_name
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ListUserRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - auth
  /v1/files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to the server, save it, and store metadata
      parameters:
      - description: File to be uploaded
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.FileResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload and Save File
      tags:
      - file
  /v1/groups:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all groups with pagination
      parameters:
      - description: Limit of groups to retrieve
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of groups retrieved successfully
          schema:
            $ref: '#/definitions/entity.ListGroupsRes'
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all groups
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Create a new group with the provided name and members
      parameters:
      - description: Group information
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/entity.CreateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Group created successfully
          schema:
            $ref: '#/definitions/entity.Void'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - group
  /v1/groups/{groupID}/add-member:
    post:
      consumes:
      - application/json
      description: Add a new member to the specified group
      parameters:
      - description: Add member to group request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.AddFileToGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Member added successfully
          schema:
            $ref: '#/definitions/entity.Void'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Group not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add a member to a group
      tags:
      - group
  /v1/groups/{id}:
    delete:
      consumes:
      - application/json
      description: Mark a group as deleted by setting its deleted_at timestamp
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group deleted successfully
          schema:
            $ref: '#/definitions/entity.Void'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a group
      tags:
      - group
    get:
      consumes:
      - application/json
      description: Retrieve group details by ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group details retrieved successfully
          schema:
            $ref: '#/definitions/entity.Group'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Group not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get group by ID
      tags:
      - group
    put:
      consumes:
      - application/json
      description: Update the group details such as name
      parameters:
      - description: Group information to update
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/entity.UpdateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/entity.Void'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a group
      tags:
      - group
  /v1/groups/messages:
    post:
      consumes:
      - application/json
      description: Adds a new message to the specified group
      parameters:
      - description: Message information
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.MessageReq'
      produces:
      - application/json
      responses:
        "200":
          description: Message added successfully
          schema:
            $ref: '#/definitions/entity.Void'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add a message to a group
      tags:
      - group
  /v1/user:
    delete:
      consumes:
      - application/json
      description: Delete a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
  /v1/user/passwords:
    put:
      consumes:
      - application/json
      description: Update the password of a user with the specified ID
      parameters:
      - description: Updated password details
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/entity.ChangePasswordReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /v1/user/profiles:
    get:
      consumes:
      - application/json
      description: Retrieve the profile of a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of a user with the specified ID
      parameters:
      - description: Updated profile details
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/entity.EditProfileReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user profile
      tags:
      - users
  /v1/user/setting:
    get:
      consumes:
      - application/json
      description: Retrieve the settings of a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Setting'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user settings
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the settings of a user with the specified ID
      parameters:
      - description: Updated setting details
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/entity.Setting'
      produces:
      - application/json
      responses:
        "200":
          description: Setting updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user settings
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
